pragma solidity ^0.4.25;

// dev : 0x51986823e2198Be1Ad51602A39b097EfbC8B25B4

/*==========================================
 =          Interface Ownable              =
 ==========================================*/
interface OwnableInterface {
    function owner() external view returns (address);
    function getStatus() external view returns(bool);
}

/*==========================================
 =          Interface Admin                =
 ==========================================*/
interface AdminInterface {
    function isAdmin(address _account) external view returns (bool);
}

/*==========================================
 =          Interface Farmer             3  =
 ==========================================*/
interface FarmerInterface {
    function isFarmer(address _account) external view returns (bool);
}

/*==========================================
 =          Interface Retailer             =
 ==========================================*/
interface RetailerInterface {
    function isRetailer(address _account) external view returns (bool);
}

/*==========================================
 =          Interface ThirdPL              =
 ==========================================*/
interface ThirdPLInterface {
    function isThirdPL(address _account) external view returns (bool);
}

/*==========================================
 =          Interface Consumer             =
 ==========================================*/
interface ConsumerInterface {
    function isConsumer(address _account) external view returns (bool);
}

/*==========================================
 =        Interface Manufacturer           =
 ==========================================*/
interface ManufacturerInterface {
    function isManufacturer(address _account) external view returns (bool);
}

/*==========================================
 =         Interface Distributor           =
 ==========================================*/
interface DistributorInterface {
    function isDistributor(address _account) external view returns (bool);
}

/*==========================================
 =          Contract SupplyChain           =
 ==========================================*/
contract SupplyChain {
  
  mapping (string => Product) products;         // Define a public mapping 'products' that maps the UPC to an Product.
  address[] allContract;                 // Define a public array 'allContract' contain 8 address contract [ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer].
  OwnableInterface public ownableContract;              //Define interface: ownableContract
  AdminInterface public adminContract;                  //Define interface: adminContract
  FarmerInterface public farmerContract;                //Define interface: farmerContract
  RetailerInterface public retailerContract;            //Define interface: retailerContract
  ThirdPLInterface public thirdPLContract;              //Define interface: thirdPLContract
  ConsumerInterface public consumerContract;            //Define interface: consumerContract
  ManufacturerInterface public manufacturerContract;    //Define interface: manufacturerContract
  DistributorInterface public distributorContract;      //Define interface: distributorContract
  
  // Define enum 'State' for product status with the following values:
  enum State { 
    Harvested,          //Actor: FarmerRole
    Processed,          //Actor: ManufacturerRole
    Packed,             //Actor: ManufacturerRole
    Distributor,        //Actor: DistributorRole
    Retailer,           //Actor: Retailer       
    Shipped,            //Actor: Has ship for Consumer, 3PLRole   
    Purchased           //Actor: Retailer
  }

  // Define struct 'Product' contain information for product:
  struct Product {
    string    productID;    // Product ID potentially
    string    upc;          // Universal Product Code (UPC), generated by the manufacturer, goes on the package, can be verified by the Consumer
    string  productNotes;   // Product Notes
    uint    productPrice;   // Product Price
    string  img;   // Product Notes
    address ownerID;        // Metamask-Ethereum address of the current owner as the product moves through 7 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID;     // Metamask-Ethereum address of the Retailer
    address manufacturerID; // Metamask-Ethereum address of the manufacturer
    address thirdPLID;      // Metamask-Ethereum address of the thirdPL
    address consumerID;     // Metamask-Ethereum address of the Consumer
    
    State productState;     // Product State as represented in the enum above
  }
   
  /*----------  START EVENT  ----------*/  
  // Define a event to log infomation product at state Harvested
  event LogHarvested(string indexed _id, string indexed _upc, string _name, address _owner, string _actor, State _state); //FarmerRole
  // Define a event to log infomation product at state Processed
  event LogProcessed(string indexed _id, string indexed _upc, string _name, address _owner, string _actor, State _state); // ManufacturerRole
  // Define a event to log infomation product at state Packed
  event LogPacked(string indexed _id, string indexed _upc, string _name, address _owner, string _actor, State _state); // ManufacturerRole
  // Define a event to log infomation product at state Distributor
  event LogDistributor(string indexed _id, string indexed _upc, string _name, address _owner, string _actor, State _state); 
  // Define a event to log infomation product at state Retailer
  event LogRetailer(string indexed _id, string indexed _upc, string _name, address _owner, string _actor, State _state);
  // Define a event to log infomation product at state Shipped
  event LogShipped(string indexed _id, string indexed _upc, string _name, address _owner, string _actor, State _state);
  // Define a event to log infomation product at state Purchased
  event LogPurchased(string indexed _id, string indexed _upc, string _name, address _owner, string _actor, State _state); // RetailerRole
  /*----------  START EVENT  ----------*/
  
  /*----------  START MODIFIER  ----------*/
  
  // Define a modifier that change active and deactive dapp
  modifier verifyStatus () {
    require(ownableContract.getStatus(),"Dapp not active");
    _;
  }
  
  // Define a modifier that checks account call function
  modifier verifyCaller (address _address) {
    require(msg.sender == _address,"Not verify"); 
    _;
  }

  // Define a modifier that checks if an product.state of a upc is Harvested
  modifier harvested(string _upc) {
    require(products[_upc].productState == State.Harvested,"Not harvested yet");
    _;
  }

  // Define a modifier that checks if an product.state of a upc is Processed
  modifier processed(string _upc) {
    require(products[_upc].productState == State.Processed,"Not process yet");
    _;
  }
  
  // Define a modifier that checks if an product.state of a upc is Packed
  modifier packed(string _upc) {
    require(products[_upc].productState == State.Packed,"Not packed yet");
    _;
  }

  // Define a modifier that checks if an product.state of a upc is ForSale
  modifier distributor(string _upc) {
    require(products[_upc].productState == State.Distributor,"Product not to distributor yet");
    _;
  }

  // Define a modifier that checks if an product.state of a upc is Sold
  modifier retailer(string _upc) {
    require(products[_upc].productState == State.Retailer, "Product not to retailer yet");
    _;
  }
  
  // Define a modifier that checks if an product.state of a upc is Shipped
  modifier shipped(string _upc) {
    require(products[_upc].productState == State.Shipped, "Product not to shipped yet");
    _;
  }
  
  // Define a modifier that checks if an product.state of a upc is Purchased
  modifier purchased(string _upc) {
    require(products[_upc].productState == State.Purchased);
    _;
  }
  
  // Define a modifier that checks Account is owner
  modifier roleOwnerMain() {
    require(ownableContract.owner() == msg.sender,"Account not is owner");
    _;
  }
  
  // Define a modifier that checks Account is Admin
  modifier isAdminMain(address _account) {
    require(adminContract.isAdmin(_account),"Account not is Farmer");
    _;
  }
  
  // Define a modifier that checks Account is Farmer
  modifier isFarmerMain(address _account) {
    require(farmerContract.isFarmer(_account),"Account not is Farmer");
    _;
  }
  
  // Define a modifier that checks Account is Manufacturer
  modifier isManufacturerMain(address _account) {
    require(manufacturerContract.isManufacturer(_account),"Account not is Manufacturer");
    _;
  }
  
  // Define a modifier that checks Account is Distributor
  modifier isDistributorMain(address _account) {
    require(distributorContract.isDistributor(_account),"Account not is Distributor");
    _;
  }
  
  // Define a modifier that checks Account is ThirdPL
  modifier isThirdPLMain(address _account) {
    require(thirdPLContract.isThirdPL(_account),"Account not is ThirdPL");
    _;
  }
  
  // Define a modifier that checks Account is Retailer
  modifier isRetailerMain(address _account) {
    require(retailerContract.isRetailer(_account),"Account not is Retailer");
    _;
  }
  
  // Define a modifier that checks Account is Consumer 
  modifier isConsumerMain(address _account) {
    require(consumerContract.isConsumer(_account),"Account not is Consumer");
    _;
  } 
  
  /*----------  END MODIFIER  ----------*/
  
  /*constructor to join 8 address contract
   *@param _contract : is array 8 address contract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   * dev : ["0x3B9b4873a7A3905226eB49443Ca1530d02702860","0x82B1AD4F680F94caF01774F8bB7EEE6A3f7e1B0F","0xE83c9a3504350A3617cB322B54E7C477bD04CE0b","0x713140d0BDA6eBb4e109a831Cfef107c65F4CD69","0x8d1519587499e26cB9aF14Caa086d219Ee4dEB90","0x3C2De641ede2EDe9c176e93F7ee3ab2a727dA257","0xc5AE2F5891e58A5DAC2a990a8d6Bfe6d7B4Add1F","0x89F72e529490D4cc9C116d88356749c9F6259De3"]
   */
  constructor(address[8] _contract) public  {
     ownableContract = OwnableInterface(_contract[0]);
     adminContract = AdminInterface(_contract[1]);
     farmerContract = FarmerInterface(_contract[2]);
     manufacturerContract = ManufacturerInterface(_contract[3]);
     distributorContract = DistributorInterface(_contract[4]);
     thirdPLContract = ThirdPLInterface(_contract[5]);
     retailerContract = RetailerInterface(_contract[6]);
     consumerContract = ConsumerInterface(_contract[7]);
     allContract = _contract;
  }
  
  /*function 'isFarmer' to check if account is Farmer 
   *@param _account : is address account need to check
   *@return bool 
   */
  function isFarmer(address _account)  public view verifyStatus returns (bool) {
      return farmerContract.isFarmer(_account);
  }
  
   /*function 'isManufacturer' to check if account is Manufacturer 
   *@param _account : is address account need to check
   *@return bool 
   */
  function isManufacturer(address _account) public view verifyStatus returns (bool) {
      return manufacturerContract.isManufacturer(_account);
  }
  
   /*function 'isDistributor' to check if account is Distributor 
   *@param _account : is address account need to check
   *@return bool 
   */
  function isDistributor(address _account) public view verifyStatus returns (bool) {
      return distributorContract.isDistributor(_account);
  }
  
  /*function 'isThirdPL' to check if account is ThirdPL 
   *@param _account : is address account need to check
   *@return bool 
   */
  function isThirdPL(address _account) public view verifyStatus returns (bool) {
      return thirdPLContract.isThirdPL(_account);
  }
  
  /*function 'isRetailer' to check if account is Retailer 
   *@param _account : is address account need to check
   *@return bool 
   */
  function isRetailer(address _account) public view verifyStatus returns (bool) {
      return retailerContract.isRetailer(_account);
  }
  
   /*function 'isConsumer' to check if account is consumer 
   *@param _account : is address account need to check
   *@return bool 
   */
  function isConsumer(address _account) public view verifyStatus returns (bool) {
      return consumerContract.isConsumer(_account);
  }
  
  /*function 'getStatus' to check status dapp
   *@return bool
   */
  function getStatus() public view returns (bool) {
        return ownableContract.getStatus();
    }
  
  /*function 'joinMainNetwork' to join 8 address contract
   *@param _contract : is array 8 address contract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   * dev : ["","","","","","","",""]
   */
  function joinMainNetwork(address[8] _contract)
    public
    roleOwnerMain
    verifyStatus
  {
     ownableContract = OwnableInterface(_contract[0]);
     adminContract = AdminInterface(_contract[1]);
     farmerContract = FarmerInterface(_contract[2]);
     manufacturerContract = ManufacturerInterface(_contract[3]);
     distributorContract = DistributorInterface(_contract[4]);
     thirdPLContract = ThirdPLInterface(_contract[5]);
     retailerContract = RetailerInterface(_contract[6]);
     consumerContract = ConsumerInterface(_contract[7]);
     allContract = _contract;
  }
  
  /*function 'joinOwnerNetwork' to join address contract of OwnerContract
   *@param _contract : is address contract of  OwnerContract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   */
  function joinOwnerNetwork(address _contract)
    public
    roleOwnerMain
    verifyStatus
  {
     ownableContract = OwnableInterface(_contract);
     allContract[0] = _contract;
  }
  
  /*function 'joinAdminNetwork' to join address contract of AdminContract
   *@param _contract : is address contract of  AdminContract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   */
  function joinAdminNetwork(address _contract)
    public
    roleOwnerMain
  {
     adminContract = AdminInterface(_contract);
     allContract[1] = _contract;
  }
  
  /*function 'joinFarmerNetwork' to join address contract of FarmerContract
   *@param _contract : is address contract of  FarmerContract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   */
  function joinFarmerNetwork(address _contract)
    public
    roleOwnerMain
    verifyStatus
  {
     farmerContract = FarmerInterface(_contract);
     allContract[2] = _contract;
  }
  
  /*function 'joinManufacturerNetwork' to join address contract of ManufacturerContract
   *@param _contract : is address contract of  ManufacturerContract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   */
  function joinManufacturerNetwork(address _contract)
    public
    roleOwnerMain
    verifyStatus
  {
      manufacturerContract = ManufacturerInterface(_contract);
      allContract[3] = _contract;
  }
  
  /*function 'joinDistributorNetwork' to join address contract of DistributorContract
   *@param _contract : is address contract of  DistributorLContract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   */
  function joinDistributorNetwork(address _contract)
    public
    roleOwnerMain
    verifyStatus
  {
      distributorContract = DistributorInterface(_contract);
      allContract[4] = _contract;
  }
  
   /*function 'joinThirdPLNetwork' to join address contract of ThirdPLContract
   *@param _contract : is address contract of  ThirdPLContract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   */
  function joinThirdPLNetwork(address _contract)
    public
    roleOwnerMain
    verifyStatus
  {
      thirdPLContract = ThirdPLInterface(_contract);
      allContract[5] = _contract;
  }
  
  /*function 'joinRetailerNetwork' to join address contract of RetailerContract
   *@param _contract : is address contract of  RetailerContract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   */
  function joinRetailerNetwork(address _contract)
    public
    roleOwnerMain
    verifyStatus
  {
      retailerContract = RetailerInterface(_contract);
      allContract[6] = _contract;
  }
  
  /*function 'joinConsumerNetwork' to join address contract of consumerContract
   *@param _contract : is address contract of  consumerContract
   *@modifier roleOwnerMain : check is msg.sender is owner of contract
   *[ownable, admin, farmer, manufacturer, distributor, 3pl, retailer, consumer]
   */
  function joinConsumerNetwork(address _contract)
    public
    roleOwnerMain
    verifyStatus
  {
      consumerContract = ConsumerInterface(_contract);
      allContract[7] = _contract;
  }
  
  /* Define a function 'kill' if required */
  function kill() public roleOwnerMain verifyStatus {
    selfdestruct(ownableContract.owner());
  }
  
  /*function 'retreiveAllContract' to get all 8 address contract 
   *@return array
   */
  function retreiveAllContract() public view verifyStatus returns (address[]){
        return allContract;
  }

  /*function harvest Product
   *@param _upc : is upc of product.
   *@param _productNotes : is name of product.
   *@param _originFarmerID : is aaddress metamask Farmer.
   *@param _productID : is ID of product.
   *@modifier isFarmerMain : Call modifier to check Farmer has account in system or not.
   */
  function harvestProduct(string _productID,string _upc,  string  _productNotes,  string  _img) public isFarmerMain(msg.sender) verifyStatus
  {
    products[_upc] = Product({
      upc: _upc,
      ownerID: msg.sender,
      originFarmerID: msg.sender,
      productID: _productID,
      productNotes: _productNotes,
      img: _img,
      productPrice: 0,
      productState: State.Harvested,
      manufacturerID: address(0),
      distributorID: address(0),
      retailerID: address(0),
      thirdPLID: address(0),
      consumerID: address(0) 
    });
    
    emit LogHarvested(_productID, _upc, _productNotes, msg.sender, "farmer", State.Harvested);
  }

  /*function process Product
   *@param _upc : is upc of product.
   *@modifier harvested : Call modifier to check if upc has passed previous supply chain stage
   *@modifier isManufacturerMain : Call modifier to check manufacturer has account in system or not.
   *@modifier verifyCaller : Call modifier to verify caller of this function is manufacturer
   */
  function processProduct(string _upc) public 
    harvested(_upc)
    isManufacturerMain(msg.sender)
    //verifyCaller(products[_upc].manufacturerID) 
    verifyStatus
  {
    Product storage product = products[_upc];
    
    product.ownerID = msg.sender;
    product.productState = State.Processed;
    product.manufacturerID = msg.sender;
  
    emit LogProcessed(product.productID, _upc, product.productNotes, msg.sender, "manufacturer", State.Processed);
  }

   /*function pack Product
   *@param _upc : is upc of product.
   *@param _price : is price of product.
   *@param _distributorID : is address metamask of distributor in next state.
   *@modifier processed : Call modifier to check if upc has passed previous supply chain stage
   *@modifier isManufacturerMain : Call modifier to check manufacturer has account in system or not.
   *@modifier verifyCaller : Call modifier to verify caller of this function is manufacturer
   */
  function packProduct(string _upc, uint _price) public 
  processed(_upc)
  isManufacturerMain(msg.sender)
  //verifyCaller(products[_upc].manufacturerID) 
  verifyStatus
  {
    Product storage product = products[_upc];
    product.productPrice = _price;
    product.productState = State.Packed;
    
    emit LogPacked(product.productID, _upc, product.productNotes, msg.sender, "manufacturer", State.Packed);
  }

  /*function distributor Product
   *@param _upc : is upc of product.
   *@param _retailerID : is address metamask of retailer in next state.
   *@modifier packed : Call modifier to check if upc has passed previous supply chain stage
   *@modifier isDistributorMain : Call modifier to check Distributor has account in system or not.
   *@modifier verifyCaller : Call modifier to verify caller of this function is Distributor
   */
  function distributorProduct(string _upc) public 
  packed(_upc)
  isDistributorMain(msg.sender)
  //verifyCaller(products[_upc].distributorID)
  verifyStatus
  {
    Product storage product = products[_upc];
     
    product.ownerID = msg.sender;
    product.distributorID = msg.sender;
    product.productState = State.Distributor;
    //product.retailerID = _retailerID;
    
    emit LogDistributor(product.productID, _upc, product.productNotes, msg.sender, " distributor ", State.Distributor);
  }

  /*function retailer Product
   *@param _upc : is upc of product.
   *@param _thirdPLID : is address metamask of thirdPL in next state.
   *@modifier distributor : Call modifier to check if upc has passed previous supply chain stage
   *@modifier isRetailerMain : Call modifier to check Retailer has account in system or not.
   *@modifier verifyCaller : Call modifier to verify caller of this function is Retailer
   */
  function retailerProduct(string _upc)  public  
  distributor(_upc)
  isRetailerMain(msg.sender)
  //verifyCaller(products[_upc].retailerID)
  verifyStatus
  {
    Product storage product = products[_upc];
    
    product.ownerID = msg.sender;
    product.retailerID = msg.sender;
    product.productState = State.Retailer;
    
    emit LogRetailer(product.productID, _upc, product.productNotes, msg.sender, "retailer", State.Retailer);
  }

  /*function ship Product
   *@param _upc : is upc of product.
   *@modifier shipped : Call modifier to check if upc has passed previous supply chain stage
   *@modifier isThirdPLMain : Call modifier to check ThirdPL has account in system or not.
   *@modifier verifyCaller : Call modifier to verify caller of this function is ThirdPL
   */
  function shipproduct(string _upc) public 
  retailer(_upc)
  isThirdPLMain(msg.sender)
  //verifyCaller(products[_upc].thirdPLID)
  verifyStatus
  {
    Product storage product = products[_upc];
    product.ownerID = msg.sender;
    product.thirdPLID = msg.sender;
    product.productState = State.Shipped;
    
    emit LogShipped(product.productID, _upc, product.productNotes, msg.sender, "ship", State.Shipped);
  }


  /*function purchased Product
   *@param _upc : is upc of product.
   *@param _consumerID : is address metamask of consumer in next state.
   *@modifier shipped : Call modifier to check if upc has passed previous supply chain stage
   *@modifier isRetailerMain : Call modifier to check Retailer has account in system or not.
   *@modifier verifyCaller : Call modifier to verify caller of this function is Retailer
   */
    function purchaseProduct(
        string _upc
    )  
    public 
    isRetailerMain(msg.sender)
    shipped(_upc) 
    //verifyCaller(products[_upc].retailerID)
    verifyStatus
    {
        Product storage product = products[_upc];
        
       // product.ownerID = _consumerID;
        //product.consumerID = _consumerID;
        product.productState = State.Purchased;
        
        emit LogPurchased(product.productID, _upc, product.productNotes, msg.sender, "consumer", State.Purchased);
    }
    
    /*function get Product Info
   *@param _upc : is upc of product.
   *@return : productID, productNotes, productPrice, productState
   */
    function getProductInfo(string _upc) public view returns(string, string, uint, State, string) {
        Product memory product = products[_upc];
        
        return (product.productID ,product.productNotes,product.productPrice, product.productState, product.img);
    }
    
    
    /*function get Product Address account
   *@param _upc : is upc of product.
   *@return : ownerID,originFarmerID, distributorID,retailerID, manufacturerID, thirdPLID, consumerID
   */
    function getProductAddress(string _upc) public view returns(address, address, address, address , address, address, address) {
        Product memory product = products[_upc];
        
        return (product.ownerID,product.originFarmerID,  product.distributorID,product.retailerID,  product.manufacturerID, product.thirdPLID, product.consumerID);
    }
}

